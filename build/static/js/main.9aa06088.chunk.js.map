{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Person.js","services/Contacts.js","components/Notification.js","App.js","index.js"],"names":["PersonForm","props","onSubmit","addName","value","name","onChange","nameHandler","number","numberHandler","type","Filter","handler","Person","person","onClick","baseUrl","axios","get","then","response","console","log","data","newObject","post","id","put","delete","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","setMessage","errorMessage","setErrorMessage","useEffect","contactService","contacts","handleDeleteButtons","window","confirm","pers","setTimeout","deleteName","filteredPersons","filterPersons","toUpperCase","includes","Notification","event","target","preventDefault","some","find","update","updatedPerson","map","catch","error","addedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9aa06088.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n      <form onSubmit={props.addName}>\n        <div>\n          name: <input value={props.name} onChange={props.nameHandler} />\n        </div>\n        <div>\n          number: <input value={props.number} onChange={props.numberHandler}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({value, handler}) => {\n    return (\n        <>filter shown with <input value={value} onChange={handler}/></>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Person = ({person, handler}) => {\n    return (\n        <>\n          <p>\n            {person.name} {person.number}\n            <button onClick={handler}>delete</button>\n          </p>\n        </>\n    )\n}\n\nexport default Person","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => {\n        console.log(response.data)\n        return response.data\n    })\n}\n  \nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => {\n        return response.data\n    })\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => {\n        return response.data\n    })\n}\n\nconst remove = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst ErrorMessage = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='errorMessage'>\n        {message}\n        </div>\n    )\n}\n\nconst SuccessMessage = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='successMessage'>\n        {message}\n        </div>\n    )\n}\n\nexport default {ErrorMessage, SuccessMessage}","import React, { useEffect, useState } from 'react'\nimport './index.css'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Person from './components/Person'\nimport contactService from './services/Contacts'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(contacts => {\n        setPersons(contacts)\n        console.log(contacts)\n      })\n  }, [])\n  \n  const addName = (event) => {\n    event.preventDefault()\n    if (persons.some(person => person.name === newName)) {\n        const person = persons.find(person => person.name === newName)     \n        if (window.confirm(`${person.name} is already added to the phonebook, do you want to replace the old number with a new one?`)) {\n          const update = {...person, number: newNumber}\n          contactService\n            .update(update.id, update)\n            .then(updatedPerson => {\n              setPersons(persons.map(pers => pers.id !== updatedPerson.id ? pers : updatedPerson))\n              setMessage(`${person.name} was updated`)\n              setTimeout(() => {\n                setMessage(null)\n              }, 3000)\n            }).catch(error => {\n              setErrorMessage(`Information of ${person.name} was already removed from server`)\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 3000)\n            })\n        }\n    } else {\n        const person = {name: newName, number: newNumber}\n        contactService\n          .create(person)\n          .then(addedPerson => {\n            setPersons(persons.concat(addedPerson))\n            setNewName('')\n            setNewNumber('')\n            setMessage(`${person.name} was added`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 3000)\n          })   \n    }\n  }\n\n  const deleteName = person => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      contactService\n        .remove(person.id)\n        .then(() => {\n          setPersons(persons.filter(pers => pers.id !== person.id))\n          setMessage(`${person.name} was deleted`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n    filterPersons(persons)\n  }\n\n  const handleDeleteButtons = (person) => {\n    return () => {\n      deleteName(person)\n    }\n  }\n  \n  var filteredPersons = persons\n  const filterPersons = (persons) => {\n    var filteredPersons = persons.filter(person => \n    person.name.toUpperCase().includes(filter.toUpperCase()))\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification.ErrorMessage message={errorMessage} />\n      <Notification.SuccessMessage message={message} />\n      <Filter value={filter} handler={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm \n        addName={addName} \n        name={newName} \n        number={newNumber}\n        nameHandler={handleNameChange}\n        numberHandler={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      {filteredPersons.map(person =>\n        <Person key={person.id} person={person} handler={handleDeleteButtons(person)} />\n      )}\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}